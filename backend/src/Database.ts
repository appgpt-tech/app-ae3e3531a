//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { levelsEntity } from './db/levels.entity';
import { fruitsEntity } from './db/fruits.entity';
import { playersEntity } from './db/players.entity';
import { scoresEntity } from './db/scores.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      levelsEntity,
      fruitsEntity,
      playersEntity,
      scoresEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      levels: [
        { levelNumber: 1, difficulty: 'difficulty 1', targetScore: 1, id: 35 },
        { levelNumber: 2, difficulty: 'difficulty 2', targetScore: 2, id: 95 },
        { levelNumber: 3, difficulty: 'difficulty 3', targetScore: 3, id: 42 },
        { levelNumber: 4, difficulty: 'difficulty 4', targetScore: 4, id: 98 },
        { levelNumber: 5, difficulty: 'difficulty 5', targetScore: 5, id: 97 },
      ],
      fruits: [
        {
          name: 'name 1',
          color: 'color 1',
          points: 1,
          specialEffect: 'specialEffect 1',
          id: 93,
        },
        {
          name: 'name 2',
          color: 'color 2',
          points: 2,
          specialEffect: 'specialEffect 2',
          id: 18,
        },
        {
          name: 'name 3',
          color: 'color 3',
          points: 3,
          specialEffect: 'specialEffect 3',
          id: 58,
        },
        {
          name: 'name 4',
          color: 'color 4',
          points: 4,
          specialEffect: 'specialEffect 4',
          id: 87,
        },
        {
          name: 'name 5',
          color: 'color 5',
          points: 5,
          specialEffect: 'specialEffect 5',
          id: 34,
        },
      ],
      players: [
        {
          playerName: 'playerName 1',
          currentLevel: 1,
          highScore: 1,
          selectedCharacter: 'selectedCharacter 1',
          id: 44,
        },
        {
          playerName: 'playerName 2',
          currentLevel: 2,
          highScore: 2,
          selectedCharacter: 'selectedCharacter 2',
          id: 43,
        },
        {
          playerName: 'playerName 3',
          currentLevel: 3,
          highScore: 3,
          selectedCharacter: 'selectedCharacter 3',
          id: 48,
        },
        {
          playerName: 'playerName 4',
          currentLevel: 4,
          highScore: 4,
          selectedCharacter: 'selectedCharacter 4',
          id: 18,
        },
        {
          playerName: 'playerName 5',
          currentLevel: 5,
          highScore: 5,
          selectedCharacter: 'selectedCharacter 5',
          id: 35,
        },
      ],
      scores: [
        { playerID: 1, scoreValue: 1, level: 1, id: 73 },
        { playerID: 2, scoreValue: 2, level: 2, id: 4 },
        { playerID: 3, scoreValue: 3, level: 3, id: 17 },
        { playerID: 4, scoreValue: 4, level: 4, id: 13 },
        { playerID: 5, scoreValue: 5, level: 5, id: 59 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('levelsEntity', data.levels);
      await this.SeedResource('fruitsEntity', data.fruits);
      await this.SeedResource('playersEntity', data.players);
      await this.SeedResource('scoresEntity', data.scores);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
